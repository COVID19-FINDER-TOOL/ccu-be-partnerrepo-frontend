{"version":3,"sources":["App.module.scss","CacheCleaner.js","store/Action/LoginAction.js","Components/Loading/LoadingPage.js","store/ActionType/ActionTypes.js","App.js","serviceWorker.js","store/Reducer/surveyReducer.js","store/Reducer/index.js","index.js"],"names":["module","exports","global","appVersion","packageJson","version","CacheCleaner","props","state","loading","isLatestVersion","refreshCacheAndReload","console","log","caches","keys","then","names","name","delete","window","location","reload","process","axios","method","url","response","data","meta","latestVersion","versionA","versionB","versionsA","split","versionsB","length","a","Number","shift","b","isNaN","semverGreaterThan","setState","this","children","React","Component","login","type","LOGIN","payload","onEditInspection","CREATEJOURNEY","onCleanCreateJourney","CLEANCREATEJOURNEY","LOGOUT","SURVEY","WelcomePage","lazy","Chatbot","Feedback","FloatingButton","connect","oppSerch","pure","useState","mobile","matchMedia","matches","callKeyVault","get","res","$keyVault","useEffect","fallback","basename","className","classes","App","Container","fluid","path","component","exact","floatingButton","isOpen","Boolean","hostname","match","survey","action","Object","assign","combineReducers","surveyData","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.74abcabd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__6faPx\",\"coverPage\":\"App_coverPage__2WLOX\",\"containerCover\":\"App_containerCover__2Irwp\",\"logoImage\":\"App_logoImage__2cZ-T\",\"logoAppImage\":\"App_logoAppImage__VFtU3\",\"containertransform\":\"App_containertransform__1Fg67\",\"appNameRow\":\"App_appNameRow__LG9CJ\",\"appName\":\"App_appName__1eh4x\",\"appSignatureRow\":\"App_appSignatureRow__28AYy\",\"signature\":\"App_signature__2c9tf\",\"span\":\"App_span__1EuYx\",\"vl\":\"App_vl__1FM2b\",\"contianerFluid\":\"App_contianerFluid__O2Vz-\",\"floatingButton\":\"App_floatingButton__doG1T\"};","import React from 'react';\r\nimport axios from 'axios';\r\nimport packageJson from '../package.json';\r\nglobal.appVersion = packageJson.version;\r\n\r\n// version from response - first param, local version second param\r\nconst semverGreaterThan = (versionA, versionB) => {\r\n  const versionsA = versionA.split(/\\./g);\r\n\r\n  const versionsB = versionB.split(/\\./g);\r\n  while (versionsA.length || versionsB.length) {\r\n    const a = Number(versionsA.shift());\r\n\r\n    const b = Number(versionsB.shift());\r\n    // eslint-disable-next-line no-continue\r\n    if (a === b) continue;\r\n    // eslint-disable-next-line no-restricted-globals\r\n    return a > b || isNaN(b);\r\n  }\r\n  return false;\r\n};\r\n\r\nclass CacheCleaner extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      isLatestVersion: false,\r\n      refreshCacheAndReload: () => {\r\n        console.log('Clearing cache and hard reloading...')\r\n        if (caches) {\r\n          // Service worker cache should be cleared with caches.delete()\r\n          caches.keys().then(function(names) {\r\n            for (let name of names) caches.delete(name);\r\n          });\r\n        }\r\n\r\n        // delete browser cache and hard reload\r\n        window.location.reload(true);\r\n     \r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(process.env)\r\n    axios({\r\n      method: 'get',\r\n      url: process.env.REACT_APP_UI+'meta.json?v='+global.appVersion,\r\n    }).then((response) => response.data )\r\n      .then((meta) => {\r\n        const latestVersion = meta.version;\r\n        const currentVersion = global.appVersion;\r\n\r\n        const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\r\n        if (shouldForceRefresh) {\r\n          console.log(`We have a new version - ${latestVersion}. Should force refresh`);\r\n          this.setState({ loading: false, isLatestVersion: false });\r\n        } else {\r\n          console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\r\n          this.setState({ loading: false, isLatestVersion: true });\r\n        }\r\n      });\r\n  }\r\n  render() {\r\n    const { loading, isLatestVersion, refreshCacheAndReload } = this.state;\r\n    return this.props.children({ loading, isLatestVersion, refreshCacheAndReload });\r\n  }\r\n}\r\n\r\nexport default CacheCleaner;","import  {LOGIN,LOGOUT,CREATEJOURNEY,CLEANCREATEJOURNEY}  from \"../ActionType/ActionTypes\";\r\n// Action to add article to store\r\nexport const login = data => ({\r\n    type: LOGIN,\r\n    payload: data\r\n});\r\n\r\nexport const onLogOut=data=>({\r\n    type:LOGOUT,\r\n    payload:data\r\n\r\n})\r\n\r\nexport const onEditInspection=data=>({\r\n    type:CREATEJOURNEY,\r\n    payload:data\r\n})\r\n\r\n\r\nexport const onCleanCreateJourney=data=>({\r\n    type:CLEANCREATEJOURNEY,\r\n    payload:''\r\n})\r\n","import React from 'react'\r\nclass Loading extends React.Component {\r\n    render(){\r\n        return(<div>Loadind....</div>)\r\n    }\r\n}\r\nexport default Loading;","\r\nexport const LOGIN=\"LOGIN\";\r\nexport const LOGOUT=\"LOGOUT\";\r\nexport const CREATEJOURNEY=\"CREATEJOURNEY\";\r\nexport const CLEANCREATEJOURNEY=\"CLEANCREATEJOURNEY\";\r\nexport const SURVEY=\"SURVEY\";\r\n\r\n ","import React, { useState, useEffect, lazy, Suspense } from 'react';\r\nimport classes from './App.module.scss';\r\n\r\nimport { Container } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Route, Switch, } from 'react-router-dom';\r\nimport CacheCleaner from './CacheCleaner.js'\r\nimport { connect } from \"react-redux\";\r\nimport 'animate.css/animate.css'\r\nimport { onEditInspection } from \"./store/Action/LoginAction\";\r\nimport axios from 'axios';\r\nimport Loadable from \"react-loadable\";\r\nimport Loading from './Components/Loading/LoadingPage.js'\r\n\r\nconst WelcomePage =  React.lazy(() => import('./Components/WelcomePage/WelcomePage'));\r\n\r\n// Loadable({\r\n//   loader:() => import('./Components/WelcomePage/WelcomePage'),\r\n//   loading: Loading\r\n// });\r\n\r\nconst Chatbot = React.lazy(() => import('./Components/Chatbot/Chatbot'));\r\n\r\n// Loadable({\r\n//   loader:() => import('./Components/Chatbot/Chatbot'),\r\n//   loading:Loading\r\n// });\r\nconst Feedback =  React.lazy(() => import('./Components/Feedback/Feedback'));\r\n\r\n// Loadable({\r\n//   loader:() => import('./Components/Feedback/Feedback'),\r\n//   loading: Loading\r\n// });\r\n\r\nconst FloatingButton = React.lazy(() => import('./Components/FloatingButton/FloatingButton'));\r\n\r\n// Loadable({\r\n//   loader:() => import('./Components/FloatingButton/FloatingButton'),\r\n//   loading: Loading\r\n// });\r\n\r\n\r\n\r\nfunction App() {\r\n  const [showCover, setShowCover] = useState(true)\r\n  // const [keyVault, setKeyVault] = useState({})\r\n  const mobile = window.matchMedia(\"(max-width: 767px)\").matches;\r\n\r\n  const callKeyVault = async() => {\r\n    await axios.get(\"https://cft-backendfunction.azurewebsites.net/api/CFTKeyVaultMSITrigger/\")\r\n    .then(res=>{\r\n      const data = res.data\r\n      window.$keyVault = data\r\n      console.log(window.$keyVault)\r\n    })\r\n\r\n  } \r\n\r\n  useEffect( ()=>{\r\n    callKeyVault()\r\n  }\r\n  ,[]);\r\n  \r\n \r\n\r\n  return (\r\n    <Suspense fallback={<div>Loading</div>}>\r\n\r\n    <CacheCleaner>\r\n      {({ loading, isLatestVersion, refreshCacheAndReload }) => {\r\n        if (loading) return null;\r\n        if (!loading && !isLatestVersion) {\r\n          // You can decide how and when you want to force reload\r\n          refreshCacheAndReload();\r\n        }\r\n\r\n        return (\r\n          <>\r\n\r\n              <Router basename=\"/\">\r\n                {/* <Header /> */}\r\n                <div className={classes.App}>\r\n                  <Container fluid={true}>\r\n                    <Switch>\r\n                      <Route path='/chatbot' component={Chatbot} />\r\n                      <Route path='/feedback' component={Feedback} />\r\n                      <Route exact path='/' component={WelcomePage} />\r\n                    </Switch>\r\n                    {mobile ? <div className={classes.floatingButton}><FloatingButton isOpen={true}></FloatingButton></div>:null}\r\n                  </Container >\r\n                </div>\r\n                {/* {!mobile ? <Footers></Footers>:null} */}\r\n              </Router>\r\n          </>\r\n        );\r\n      }}\r\n    </CacheCleaner>\r\n     </Suspense>\r\n\r\n  );\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n  let payload = state.oppSerch\r\n\r\n  return { payload };\r\n};\r\n\r\nexport default connect(mapStateToProps, null, null, { pure: false })(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport { LOGOUT, LOGIN, CREATEJOURNEY, CLEANCREATEJOURNEY, SURVEY } from '../ActionType/ActionTypes'\r\n\r\nconst survey = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case LOGOUT:\r\n            return state = {}\r\n        case LOGIN:\r\n            return { ...state, LOGIN: action.payload };\r\n        case CREATEJOURNEY:\r\n            let payload = Object.assign({}, state.CREATEJOURNEY, action.payload)\r\n            return { ...state, CREATEJOURNEY: payload }\r\n        case CLEANCREATEJOURNEY:\r\n            return { ...state, CREATEJOURNEY: '' }\r\n        case SURVEY:\r\n            let data = Object.assign({}, state.SURVEY, action.data)\r\n            return { ...state, SURVEY: data }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default survey;","import { combineReducers } from \"redux\";\r\nimport survey from \"./surveyReducer\";\r\n// Combine all reducers as root reducer\r\nexport default combineReducers({surveyData:survey});","import 'react-app-polyfill/ie9';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport style from 'bootstrap/dist/css/bootstrap.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport reducer from './store/Reducer/index'\r\nimport { Provider } from 'react-redux';\r\n// import KeyboardEventHandler from 'react-keyboard-event-handler';\r\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\nstore.subscribe(() => {\r\n  // When state will be updated(in our case, when items will be fetched), \r\n  // we will update local component state and force component to rerender \r\n  // with new data.\r\n  console.log(store.getState())\r\n\r\n\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <KeyboardEventHandler\r\n      handleKeys={['F1']}\r\n      onKeyEvent={(key, e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }} > */}\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n      {/* </KeyboardEventHandler> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}